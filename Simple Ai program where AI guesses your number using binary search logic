{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d6511388-3344-43bf-955a-4d01bc098051",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Think of a number between 1 and 100, and I (the AI) will try to guess it!\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Press Enter when you're ready... 1\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My guess is: 50\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Is it (h)igh, (l)ow, or (c)orrect?  h\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "My guess is: 25\n"
     ]
    },
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Is it (h)igh, (l)ow, or (c)orrect?  c\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      " Great! I guessed your number in 2 tries.\n"
     ]
    }
   ],
   "source": [
    "# Simple AI Program: AI guesses your number using binary search logic\n",
    " \n",
    "print(\" Think of a number between 1 and 100, and I (the AI) will try to guess it!\")\n",
    "input(\"Press Enter when you're ready...\")\n",
    " \n",
    "low = 1\n",
    "high = 100\n",
    "attempts = 0\n",
    " \n",
    "while low <= high:\n",
    "    guess = (low + high) // 2\n",
    "    attempts += 1\n",
    "    print(f\"My guess is: {guess}\")\n",
    "    feedback = input(\"Is it (h)igh, (l)ow, or (c)orrect? \").strip().lower()\n",
    " \n",
    "    if feedback == 'c':\n",
    "        print(f\" Great! I guessed your number in {attempts} tries.\")\n",
    "        break\n",
    "    elif feedback == 'h':\n",
    "        high = guess - 1\n",
    "    elif feedback == 'l':\n",
    "        low = guess + 1\n",
    "    else:\n",
    "        print(\"Please respond with 'h' (high), 'l' (low), or 'c' (correct).\")\n",
    " \n",
    "if low > high:\n",
    "    print(\"Hmm  It seems there's some inconsistency. Let's try again!\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4956ab9-9787-4389-8ed1-f06cac69d75f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:base] *",
   "language": "python",
   "name": "conda-base-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
